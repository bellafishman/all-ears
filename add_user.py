#
# Adds a new user to the
# MusicApp database.
#

import json
import boto3
import os
import datatier
import auth

from configparser import ConfigParser

def lambda_handler(event, context):
  try:
    print("**STARTING**")
    print("**lambda: add_user**")

    
    #
    # setup AWS based on config file:
    #
    config_file = 'musicapp-config.ini'
    os.environ['AWS_SHARED_CREDENTIALS_FILE'] = config_file
    
    configur = ConfigParser()
    configur.read(config_file)
    
    #
    # configure for S3 access:
    #
    #s3_profile = 's3readonly'
    #boto3.setup_default_session(profile_name=s3_profile)
    #
    #bucketname = configur.get('s3', 'bucket_name')
    #
    #s3 = boto3.resource('s3')
    #bucket = s3.Bucket(bucketname)
    
    #
    # configure for RDS access
    #
    rds_endpoint = configur.get('rds', 'endpoint')
    rds_portnum = int(configur.get('rds', 'port_number'))
    rds_username = configur.get('rds', 'user_name')
    rds_pwd = configur.get('rds', 'user_pwd')
    rds_dbname = configur.get('rds', 'db_name')


    #
    # the user has sent us 5 parameters:
    #  1. username
    #  2. pwd
    #  3. first_name
    #  4. last_name
    #  5. email
    #
    # The parameters are coming through web server 
    # (or API Gateway) in the body of the request
    # in JSON format.
    #
    print("**Accessing request body**")
    
    if "body" not in event:
      raise Exception("event has no body")
      
    body = json.loads(event["body"]) # parse the json
    
    if "username" not in body:
      raise Exception("event has a body but no username")
    if "pwd" not in body:
      raise Exception("event has a body but no password")
    if "first_name" not in body:
      raise Exception("event has a body but no first_name")
    if "last_name" not in body:
      raise Exception("event has a body but no last_name")
    if "email" not in body:
      raise Exception("event has a body but no email")

    username = body["username"]
    pwd = body["pwd"]
    first_name = body["first_name"]
    last_name = body["last_name"]
    email = body["email"]
    
    print("username:", username)
    print("pwd:", pwd)
    print("first:", first_name)
    print("last:", last_name)
    print("email:", email)



    #
    # open connection to the database:
    #
    print("**Opening connection**")
    
    dbConn = datatier.get_dbConn(rds_endpoint, rds_portnum, rds_username, rds_pwd, rds_dbname)
    

    #
    # check is user email is already in use in database
    #
    existing_user_sql = "SELECT * FROM users WHERE email = %s"
    existing_user = datatier.retrieve_one_row(dbConn, existing_user_sql, email)
    # if email in use, print something and return out of function
    if existing_user:
      return {
        'statusCode': 400,
        'body': json.dumps({"error": "User with this email already exists"})
      }
        


    #
    # now insert the user:
    #
    print("**Inserting the user**")
    
    #
    # add a user to the database
    #
    sql = """
        INSERT INTO users (username, pwdhash, first_name, last_name, email)
        VALUES (%s, %s, %s, %s, %s);
        """
    hashpass = auth.hash_password(pwd)
    
    user_data = [username, hashpass, first_name, last_name, email]
    
    datatier.perform_action(dbConn, sql, user_data)

    ## checks passwords by ...
    # bcrypt.checkpw(pwd, hashpwd)
    # returns a bool saying if they match
    #
    # grab the jobid that was auto-generated by mysql:
    #
    sql = "SELECT LAST_INSERT_ID();"
    
    row = datatier.retrieve_one_row(dbConn, sql)
    
    userid = row[0]
    
    print("userid:", userid)

    #
    # respond in an HTTP-like way, i.e. with a status
    # code and body in JSON format:
    #
    print("**DONE, returning status**")
    
    return {
      'statusCode': 200,
      'body': json.dumps(str(userid))
    }
    
  except Exception as err:
    print("**ERROR**")
    print(str(err))
    
    return {
      'statusCode': 400,
      'body': json.dumps(str(err))
    }
